/*
描画用のファイル
*/
#include <SDL.h>
#include <stdint.h>
#include <cstring>
#include "nes_manager.h"

#define SDL_MAIN_HANDLED

static SDL_Window* window = nullptr;
static SDL_Renderer* renderer = nullptr;
static SDL_Surface* surface = nullptr;
static SDL_Texture* texture = nullptr;

const int SCREEN_WIDTH = 256;
const int SCREEN_HEIGHT = 240;
const int SCALE = 3;

SDL_Color nes_palette[64] = {
    {0x80, 0x80, 0x80},{0x00, 0x3D, 0xA6},{0x00, 0x12, 0xB0},{0x44, 0x00, 0x96},
    {0xA1, 0x00, 0x5E},{0xC7, 0x00, 0x28},{0xBA, 0x06, 0x00},{0x8C, 0x17, 0x00},
    {0x5C, 0x2F, 0x00},{0x10, 0x45, 0x00},{0x05, 0x4A, 0x00},{0x00, 0x47, 0x2E},
    {0x00, 0x41, 0x66},{0x00, 0x00, 0x00},{0x05, 0x05, 0x05},{0x05, 0x05, 0x05},
    {0xC7, 0xC7, 0xC7},{0x00, 0x77, 0xFF},{0x21, 0x55, 0xFF},{0x82, 0x37, 0xFA},
    {0xEB, 0x2F, 0xB5},{0xFF, 0x29, 0x50},{0xFF, 0x22, 0x00},{0xD6, 0x32, 0x00},
    {0xC4, 0x62, 0x00},{0x35, 0x80, 0x00},{0x05, 0x8F, 0x00},{0x00, 0x8A, 0x55},
    {0x00, 0x99, 0xCC},{0x21, 0x21, 0x21},{0x09, 0x09, 0x09},{0x09, 0x09, 0x09},
    {0xFF, 0xFF, 0xFF},{0x0F, 0xD7, 0xFF},{0x69, 0xA2, 0xFF},{0xD4, 0x80, 0xFF},
    {0xFF, 0x45, 0xF3},{0xFF, 0x61, 0x8B},{0xFF, 0x88, 0x33},{0xFF, 0x9C, 0x12},
    {0xFA, 0xBC, 0x20},{0x9F, 0xE3, 0x0E},{0x2B, 0xF0, 0x35},{0x0C, 0xF0, 0xA4},
    {0x05, 0xFB, 0xFF},{0x5E, 0x5E, 0x5E},{0x0D, 0x0D, 0x0D},{0x0D, 0x0D, 0x0D},
    {0xFF, 0xFF, 0xFF},{0xA6, 0xFC, 0xFF},{0xB3, 0xEC, 0xFF},{0xDA, 0xAB, 0xEB},
    {0xFF, 0xA8, 0xF9},{0xFF, 0xAB, 0xB3},{0xFF, 0xD2, 0xB0},{0xFF, 0xEF, 0xA6},
    {0xFF, 0xF7, 0x9C},{0xD7, 0xE8, 0x95},{0xA6, 0xED, 0xAF},{0xA2, 0xF2, 0xDA},
    {0x99, 0xFF, 0xFC},{0xDD, 0xDD, 0xDD},{0x11, 0x11, 0x11},{0x11, 0x11, 0x11},
};

Screen* create_screen() {
    Screen* canvas = new Screen;
    canvas->screen = new uint8_t[256*240];
    memset(canvas->screen, 0, 256 * 240);
    canvas->line = 0;

    canvas->complete = false;
    canvas->drawing = false;
    return canvas;
}

void make_display() {
    
    window = SDL_CreateWindow("NES Display",SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,SCREEN_WIDTH * SCALE, SCREEN_HEIGHT * SCALE, 0);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGB24, SDL_TEXTUREACCESS_STREAMING, SCREEN_WIDTH, SCREEN_HEIGHT);
    surface = SDL_CreateRGBSurfaceWithFormat(0, SCREEN_WIDTH, SCREEN_HEIGHT, 8, SDL_PIXELFORMAT_INDEX8);
    SDL_SetPaletteColors(surface->format->palette, nes_palette, 0, 64);
}

void coloring(Screen* canvas) {
    memcpy(surface->pixels, canvas->screen, SCREEN_WIDTH * SCREEN_HEIGHT);

    if (texture) SDL_DestroyTexture(texture);
    texture = SDL_CreateTextureFromSurface(renderer, surface);

    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer, texture, NULL, NULL);
    SDL_RenderPresent(renderer);
}

void delete_display() {
    if (texture) SDL_DestroyTexture(texture);
    if (surface) SDL_FreeSurface(surface);
    if (renderer) SDL_DestroyRenderer(renderer);
    if (window) SDL_DestroyWindow(window);
}